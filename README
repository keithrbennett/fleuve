---------------------------------------------------------
Solution to the LeanDog Path of Least Resistance problem.
---------------------------------------------------------

I am using Ruby Enterprise Edition:

ruby 1.8.7 (2011-02-18 patchlevel 334) [i686-darwin10.7.3], MBARI 0x6770, Ruby Enterprise Edition 2011.03

...and rspec 2.7.1.

I like JRuby, but it takes longer to load and for cases
like this it doesn't add anything useful
(unless we use a multithreaded approach, see below).

I chose this version of Ruby, and RSpec, because they do their
respective jobs well and I am comfortable with them.
I haven't worked with Ruby 1.9 much, but if I had, I probably would prefer
to use it for this problem.

I chose the Ruby language because it is flexible, concise,
powerful, and expressive.  However, Lisp or Clojure would probably
produce the result in 3 lines of code.  Those 3 lines might take
a really long time to write (for me) though. ;)  At some point,
I'd like to rewrite this in Clojure.

Much, but not all, of this development was done test first.
I've tested the example inputs to ensure that they produce
the example output (or, in one case, an alternate solution).

In addition, for larger data sets, this could be run in JRuby,
with one thread allocated per CPU, and the starting rows partitioned
among the threads.

I have not yet successfully tested the 10x100 matrix because I'm working at a
coffee shop with no electricity, and the 100% CPU would use up
my battery quickly.  I tried it once but aborted after several minutes.

Mea culpa: I spent way more time developing the infrastructure than
thinking about the logic of the problem.  In fact, I'm not at all
confident that there isn't a much better and faster approach.
The recursive logic was the hardest part for me.

The Area.optimal_path method returns nil if there are no paths
to completion in an area (i.e. all paths exceed maximum resistance).
